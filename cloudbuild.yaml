steps:

# 1Ô∏è‚É£ Run automated tests ‚Äî must pass to continue
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "üöÄ Running automated tests..."
      chmod +x test.sh
      ./test.sh
  # If this fails, the build will stop and no further steps will run.

# 2Ô∏è‚É£ Cleanup: Check for existing VM and delete if found
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "üîç Checking for existing VM..."
      VM_EXISTS=$(gcloud compute instances list --filter="name=web-server" --format="value(name)")
      if [ "$VM_EXISTS" != "" ]; then
        echo "‚ö†Ô∏è Existing VM found: $VM_EXISTS ‚Äî deleting..."
        gcloud compute instances delete web-server --zone=us-central1-a --quiet
      else
        echo "‚úÖ No existing VM to delete."
      fi

# 3Ô∏è‚É£ Create a fresh VM with Nginx + Cloud Logging agent
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    [
      'compute', 'instances', 'create', 'web-server',
      '--zone=us-central1-a',
      '--machine-type=e2-micro',
      '--subnet=public-subnet',
      '--tags=http-server,https-server',
      '--image-family=debian-11',
      '--image-project=debian-cloud',
      '--metadata=startup-script=sudo apt update && sudo apt install -y nginx google-fluentd && sudo systemctl enable nginx && sudo systemctl start nginx && sudo systemctl enable google-fluentd && sudo systemctl start google-fluentd'
    ]

# 4Ô∏è‚É£ Copy app files to the VM
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    [
      'compute', 'scp',
      '--zone=us-central1-a',
      '--recurse',
      './app/*',
      'web-server:/var/www/html'
    ]

# 5Ô∏è‚É£ Restart Nginx to serve the new app
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    [
      'compute', 'ssh',
      '--zone=us-central1-a',
      'web-server',
      '--command=sudo systemctl restart nginx'
    ]

timeout: 900s
