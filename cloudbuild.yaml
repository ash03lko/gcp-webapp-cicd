steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        'us-central1-docker.pkg.dev/graphite-store-463414-p2/my-repo/my-app',
        '.'
      ]

  # Step 2: Push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'us-central1-docker.pkg.dev/graphite-store-463414-p2/my-repo/my-app'
      ]

  # Step 3: Cleanup GCP resources (if needed)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üßπ Cleaning up existing resources..."
        gcloud compute instances delete web-server --zone=us-central1-a --quiet || echo "‚úÖ No VM found or already deleted"
        gcloud compute firewall-rules delete allow-http-https --quiet || echo "‚úÖ No firewall found"
        gcloud compute networks subnets delete private-subnet --region=us-central1 --quiet || echo "‚úÖ No subnet found"
        gcloud compute networks delete my-vpc --quiet || echo "‚úÖ No VPC found"

  # Step 4: Terraform init
  - name: 'hashicorp/terraform:1.6.6'
    args: ['init']

  # Step 5: Terraform validate
  - name: 'hashicorp/terraform:1.6.6'
    args: ['validate']

  # Step 6: Unlock stale state lock (if any)
  - name: 'gcr.io/cloud-builders/gsutil'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        LOCK_FILE="gs://graphite-store-463414-p2_cloudbuild/terraform/state/default.tflock"
        if gsutil ls $LOCK_FILE; then
          echo "‚ö†Ô∏è Stale lock file found. Deleting..."
          gsutil rm $LOCK_FILE
        else
          echo "‚úÖ No stale lock file found"
        fi

  # Step 7: Terraform apply
  - name: 'hashicorp/terraform:1.6.6'
    args:
      - 'apply'
      - '-auto-approve'

  # Step 8: Run tests using run_test.sh
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        chmod +x run_test.sh
        ./run_test.sh

timeout: 1200s # 20 minutes
